/*
 * Copyright 2025 OmniOne.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.omnione.did;

import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import org.omnione.did.zkp.datamodel.definition.CredentialDefinition;
import org.omnione.did.zkp.datamodel.schema.CredentialSchema;
import org.omnione.exception.BlockChainException;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.ConfigurationPropertiesScan;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@ConfigurationPropertiesScan(basePackages = "org.omnione.did.base.property")
@Slf4j
@EnableFeignClients
public class VerifierApplication {

    public static void main(String[] args) throws BlockChainException {
        // 임시 컨트랙트 등록용 start
        ContractApi contractApi = ContractFactory.EVM.create("/Users/jinhwan-notebook/workspace/did-orchestrator-server/source/did-orchestrator-server/shells/Fabric/blockchain.properties");
//
        //forten
        String schemaStr ="{\"id\":\"did:omn:NcYxiDXkpYi6ov5FcYDi1e:2:mdl:1.0\",\"name\":\"mdl\",\"version\":\"1.0\",\"attrNames\":[\"MDLNS.zkpsex\",\"MDLNS.zkpbirth\",\"MDLNS.zkpasort\",\"MDLNS.zkpaddr\"],\"attrTypes\":[{\"namespace\":{\"id\":\"MDLNS\",\"name\":\"MDL NameSpace\"},\"items\":[{\"label\":\"zkpsex\",\"caption\":\"성별\",\"type\":\"STRING\"},{\"label\":\"zkpbirth\",\"caption\":\"생년월일\",\"type\":\"NUMBER\"},{\"label\":\"zkpasort\",\"caption\":\"뭔지모름\",\"type\":\"STRING\"},{\"label\":\"zkpaddr\",\"caption\":\"주소\",\"type\":\"STRING\",\"i18n\":{\"ko\":\"주소\",\"en\":\"address\"}}]}],\"tag\":\"Tag1\"}";
        CredentialSchema cres = new Gson().fromJson(schemaStr, CredentialSchema.class);
        contractApi.registZKPCredential(cres);
        System.out.println("credSchema 등록 성공");
//
        String defStr = "{\"id\":\"did:omn:NcYxiDXkpYi6ov5FcYDi1e:3:CL:did:omn:NcYxiDXkpYi6ov5FcYDi1e:2:mdl:1.0:Tag1\",\"schemaId\":\"did:omn:NcYxiDXkpYi6ov5FcYDi1e:2:mdl:1.0\",\"ver\":\"1.0\",\"type\":\"CL\",\"value\":{\"primary\":{\"n\":\"59860597415732594586322996780101072426742081971139212110158051898043625711556667664843407829675212791801814815791212095327184939151770122363014547077350763808192284222965796016990063511764566739172762889431318451894984850794199200358554718116469815681320789292560928017363826324858941959050719520070955998467828143540941604609364595924290602155085184584190977750626111569795332202777246734481658454413767690346066539826779882004430449049138067381922460987236065787014455469847309200441339543859818944457112035084617787068742040284994156302272480710146830793925282438015849764874555899307408830914565386899254617006551\",\"z\":\"53948572442362034548143078083831634367449394103674007175789242618082784250021494676466950195636672883878938358345289124138396103287808442301379538033798315228639637222716381687829328838703607558495190055061173495241698416677991276744661238514364775559287030052320759923462207551489853785623117944035176291248256927450800026759416799348258606445012279028515160083080882532271031958930538064189023498803811547812480202919184749652681575556497564074490381136136074266432515782589641933354196065619300064112439509740399086664752961045306473601602677446593394918199610504278686404218603626149100492810509994529869834201993\",\"s\":\"1966678664936285184194516133540593329197510885117337236750378138658838597586350784939850653750533164387973813771789263200529095930508150994842260233901553576931876733432289091513891464757685228958037106955286380851903329942594868596398443437635013737923567698090475446556548866938882757242353771255477364802298696642589788540877022480134457819861629104415511091485330155753472591457307678872950625385220715864938302139386248442754795410929719038737678844490505870928747983991577682771102871914402109991414976687803265447007365911672402668135623031299714712343773397156923391346141171535283394050554279156594805620217\",\"r\":{\"MDLNS.zkpsex\":\"8165282510325809097392519479369837560557221616280676580243187974737204488651150448478880603249993892227919010989018120676139794575883025760961966680355731819133819650210234894000458769813721979767977456570140201750547699731784924509794402005811161545481358049204943128339056968208786336934242031447392027520406923434757737563809728980761714547201606054555959964543379622526984059950876894812133612650448512002096194431348729722368507663864280952900400419505029622291330069942633731484994093043688666418174584557103072270060691102312446240252634160746132453163245781619484511101031555857064077278670135256085019784698\",\"MDLNS.zkpbirth\":\"2812196033916738819920940618167978963670155380543294822834869200028478579132402498065642624545143166188934009366522301673418813008410239888077443955776402030842838769878988773774897613162664406751689623676248819040708293117414559052265294613504065741026788053236353179211060983211002894964544868556017413466123586559525497663879004722905371553349260949005619309857743095255324288114678424190827664190816795761573000227522858230966694737175151448694789925480649283136704533311487415557497722786964020044215021601886338602354965596487223354984041721734199163127975552328875127824515312927968947257185198106159869201047\",\"MDLNS.zkpasort\":\"14981107742279698909366180380832259236620980271741340292789830582142520449265760889835473084058935895732735920951371044686491149321578585356160505030329793917674567572041076199823990258948554922008772428853967549834798137962033409999283184637698153981213495193995094015453959462736007361391195789916820761065228532781162319884166303056511256844569118358136293145258011399804646071857086300346637787738206638845784757516346328812774281206572853449301072664955048543962564156445027985151226885418088686262770115540313326121881330697739202969706190005497877434650021059718938651704791552149661236638014706488052659799796\",\"MDLNS.zkpaddr\":\"19279735010157046323794786712315063050957638889595556425849805594962664195294106653643588009386992406200613054942427789918801254541604135786637206645618118947461283681508519214814736434788915482754902019054342463992283143990427334321708881103898040277901940574479242449985629749407687739726374561036632832332104449230875932725255964474258872516079720248919362434816340279439067324886427587492244547744820954932786673582639074669047377930799493408069853231274641686138896862209089974372518326560376904701420407292517138495140328720631992338861543737924751186529786657275113332036796268592571240984443081381292533914503\",\"masterSecret\":\"57236427246948706263410186094070815728853363441723175862233335370113279674442895261889954417022696667112305465170294885780709748238668309350364649147947277323462027803805738003104016879315429400138089485560864956217471083634588054859956044369489847849902301052831563052512534384333833066842193569402788517609997494119292860558242728132596056933031758186281227301111921984269392224966203943094433348235512393413367697158517077689924089939352600778036526907602837320979169657454600363070846788717357377779857047678385864341881831793982153279271888692834303521901852044523962755213288817797211171257166879297900217111819\"},\"rctxt\":\"12619235552069730302448274565459516172167291652394506623921473079982813002491350937535959873490761028123983403433959949688589284880094520864802592187570442987161019210700072738254548269540979507615672433892493954037008051773623652531056611332940682002185334475228608739346612793798860112560583665814269589126161894279035011687605533603004190611933392355505565219873647600637246536893733121672116265946597174252092949726566998861019846151742875002753940167978737263598315543154571554888075928728272776385176439663447465649290404902186339956363264679310050322049669950989686945756067248260477803037467392700361988610725\"}},\"tag\":\"Tag1\"}";
        CredentialDefinition cred = new Gson().fromJson(defStr, CredentialDefinition.class);
        contractApi.registZKPCredentialDefinition(cred);
        System.out.println("credDef 등록 성공");
        //forten
        // 임시 컨트랙트 등록용 end

        CredentialDefinition credentialDefinition = (CredentialDefinition) contractApi.
                getZKPCredentialDefinition("did:omn:NcYxiDXkpYi6ov5FcYDi1e:3:CL:did:omn:NcYxiDXkpYi6ov5FcYDi1e:2:mdl:1.0:Tag1");
        System.out.println("credentialDefinition = " + credentialDefinition.toJson());
        CredentialSchema credentialSchema = (CredentialSchema) contractApi.getZKPCredential("did:omn:NcYxiDXkpYi6ov5FcYDi1e:2:mdl:1.0");
        System.out.println("credentialSchema = " + credentialSchema.toJson());

        SpringApplication.run(VerifierApplication.class, args);
    }

}
